{"version":3,"sources":["initial/buttons-names.js","components/Input/Input.module.css","initial/routes-names.js","components/AuthIntro/AuthIntro.module.css","components/AuthNav/AuthNav.module.css","components/AuthGoogle/AuthGoogle.module.css","components/AuthForm/AuthForm.module.css","components/Button/Button.module.css","initial/imputs-names.js","components/Input/InputName.jsx","components/Input/InputEmail.jsx","components/Input/InputPassword.jsx","components/Button/Button.jsx","components/AuthForm/AuthForm.jsx","components/AuthIntro/AuthIntro.jsx","components/AuthNav/AuthNav.jsx","components/AuthGoogle/AuthGoogle.jsx","views/LoginView/LoginView.module.css","views/LoginView/LoginView.jsx"],"names":["buttons","GOOGLE","SIGN_IN","SIGN_UP","module","exports","routes","LOGIN","REGISTER","inputs","InputName","name","register","errors","className","s","item","input","type","defaultValue","required","value","message","minLength","maxLength","placeholder","autoComplete","error","InputEmail","pattern","InputPassword","Button","onClick","children","allyProps","button","defaultProps","AuthForm","onFormSubmit","NAME","EMAIL","PASSWORD","useState","text","setText","buttonName","setButtonName","location","useLocation","useForm","handleSubmit","reset","formState","isSubmitSuccessful","useEffect","pathname","slice","form","onSubmit","aria-label","AuthIntro","container","title","AuthNav","list","Object","values","map","route","listItem","link","activeClassName","activeLink","exact","to","AuthGoogle","href","googleURL","icon","sprite","LoginView","dispatch","useDispatch","section","data","user","email","password","authOperations","logIn"],"mappings":"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","file":"static/js/login-view.b8391561.chunk.js","sourcesContent":["const buttons = {\n    GOOGLE: 'Google',\n    SIGN_IN: 'Sign in',\n    SIGN_UP: 'Sign up'\n}\n\nexport { buttons }\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Input_item__3awOq\",\"input\":\"Input_input__3PNbO\",\"error\":\"Input_error__2VO4D\"};","const routes = {\n    LOGIN: '/login',\n    REGISTER: '/register'\n}\n\nexport {routes}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AuthIntro_container__3otVG\",\"title\":\"AuthIntro_title__3NIpU\",\"text\":\"AuthIntro_text__23Nmk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"AuthNav_list__2DoAR\",\"listItem\":\"AuthNav_listItem__3HvvF\",\"link\":\"AuthNav_link__2ejsg\",\"activeLink\":\"AuthNav_activeLink__3huQJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AuthGoogle_container__1Ytb6\",\"text\":\"AuthGoogle_text__8Atb2\",\"link\":\"AuthGoogle_link__UaebJ\",\"button\":\"AuthGoogle_button__3mF_8\",\"icon\":\"AuthGoogle_icon__1Aiap\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"AuthForm_text__r51se\",\"form\":\"AuthForm_form__3OfNI\",\"button\":\"AuthForm_button__2blVA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\"};","const inputs = {\n    NAME: 'Name',\n    EMAIL: 'E-mail',\n    PASSWORD: 'Password'\n}\n\nexport { inputs }\n","import PropTypes from 'prop-types';\nimport s from './Input.module.css';\n\nconst InputName = ({ name, register, errors }) => {\n\n    return (\n        <li className={s.item}>\n            <input\n                className={s.input}\n                name={name}\n                type=\"text\"\n                defaultValue=\"\"\n                {...register(name, {\n                    required:\n                    {\n                        value: true,\n                        message: 'This field cannot be empty'\n                    },\n                    minLength: {\n                        value: 3,\n                        message: 'Min length for this field value must be 3 characters'\n                    },\n                    maxLength: {\n                        value: 30,\n                        message: 'Max length for this field value must be 30 characters'\n                    }\n                })}\n                placeholder={name}\n                autoComplete=\"off\"\n            />\n            {errors[`${name}`] &&\n                <p className={s.error}>{`${errors?.[name]?.message}`}</p>}\n        </li>\n    )\n}\n        \nInputName.propTypes = {\n  name: PropTypes.string.isRequired,\n  register: PropTypes.func.isRequired\n};\n\nexport default InputName;","import PropTypes from 'prop-types';\nimport s from './Input.module.css';\n\nconst InputEmail = ({ name, register, errors }) => {\n\n    return (\n        <li className={s.item}>\n            <input\n                className={s.input}\n                name={name}\n                type=\"text\"\n                defaultValue=\"\"\n                {...register(name, {\n                    required:\n                    {\n                        value: true,\n                        message: 'This field cannot be empty'\n                    },\n                    pattern: {\n                        value: /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z_-]+(\\.[a-z_-]+)*\\.[a-z]{2,6}$/,\n                        message: 'Email is not valid'\n                    }\n                })}\n                placeholder={name}\n                autoComplete=\"off\"\n            />\n            {errors[`${name}`] &&\n                <p className={s.error}>{`${errors?.[name]?.message}`}</p>}\n        </li>\n    )\n}\n        \nInputEmail.propTypes = {\n  name: PropTypes.string.isRequired,\n  register: PropTypes.func.isRequired\n};\n\nexport default InputEmail;","import PropTypes from 'prop-types';\nimport s from './Input.module.css';\n\nconst InputPassword = ({ name, register, errors }) => {\n\n    return (\n        <li className={s.item}>\n            <input\n                className={s.input}\n                name={name}\n                type=\"text\"\n                defaultValue=\"\"\n                {...register(name, {\n                    required:\n                    {\n                        value: true,\n                        message: 'This field cannot be empty'\n                    },\n                    minLength: {\n                        value: 3,\n                        message: 'Min length for this field value must be 3 characters'\n                    }\n                })}\n                placeholder={name}\n                autoComplete=\"off\"\n            />\n            {errors[`${name}`] &&\n                <p className={s.error}>{`${errors?.[name]?.message}`}</p>}\n        </li>\n    )\n}\n        \nInputPassword.propTypes = {\n  name: PropTypes.string.isRequired,\n  register: PropTypes.func.isRequired\n};\n\nexport default InputPassword;","import PropTypes from 'prop-types';\nimport s from './Button.module.css';\n\nconst Button = ({ onClick, children, ...allyProps }) => {\n  \n  return (\n    <button\n      className={s.button}\n      type=\"submit\"\n      onClick={onClick}\n      {...allyProps}>\n      {children}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  onClick: () => null,\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n  'aria-label': PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { inputs } from 'initial/imputs-names';\nimport { buttons } from 'initial/buttons-names';\nimport { routes } from 'initial/routes-names';\nimport s from './AuthForm.module.css';\nimport InputName from 'components/Input/InputName';\nimport InputEmail from 'components/Input/InputEmail';\nimport InputPassword from 'components/Input/InputPassword';\nimport Button from 'components/Button';\n\nconst AuthForm = ({ onFormSubmit }) => {\n    const { NAME, EMAIL, PASSWORD } = inputs\n    const { SIGN_IN, SIGN_UP } = buttons\n    const { LOGIN, REGISTER } = routes\n\n    const [text, setText] = useState('')\n    const [buttonName, setButtonName] = useState('')\n    const location = useLocation()\n    \n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState: { isSubmitSuccessful, errors },\n    } = useForm();\n\n    useEffect(() => {\n        if (isSubmitSuccessful) {\n            reset();\n        }\n    }, [isSubmitSuccessful, reset]);\n\n    useEffect(() => {\n        if (location.pathname === LOGIN) {\n            setText(`${LOGIN.slice(1)} to`)\n            setButtonName(SIGN_IN)\n        } else {\n            setText(`${REGISTER.slice(1)} in`)\n            setButtonName(SIGN_UP)\n        }\n    }, [LOGIN, REGISTER, SIGN_IN, SIGN_UP, location.pathname])\n\n    return (\n        <div>\n            <p className={s.text}>\n                {`Or ${text} our app using e-mail and password:`}\n            </p>\n            <form className={s.form} onSubmit={handleSubmit(onFormSubmit)}>\n                <ul>\n                    {location.pathname === REGISTER &&                       \n                        <InputName\n                            name={NAME}\n                            register={register}\n                            errors={errors} />}\n                    <InputEmail\n                        name={EMAIL}\n                        register={register}\n                        errors={errors} />\n                    <InputPassword\n                        name={PASSWORD}\n                        register={register}\n                        errors={errors} />\n                </ul>\n                <Button\n                    className={s.button}\n                    name={buttonName}\n                    children={buttonName}\n                    aria-label={buttonName}/>\n            </form>\n        </div>\n    )\n}\n    \nexport default AuthForm;","import s from './AuthIntro.module.css';\n\nconst AuthIntro = () => {\n    \n    return (\n        <div className={s.container}>\n            <h1 className={s.title}>Pro Test</h1>\n            <p className={s.text}>\n                <b>[ </b>\n                    We will help you find weak points <br/> in knowledge so that you can strengthen it.\n                    We will show you what is relevant to know for a <b>QA Engineer</b> and will try to make\n                    the learning process more diverse_ <b>]\n                </b>\n            </p>\n        </div>\n    )\n}\n\nexport default AuthIntro;","import { NavLink } from 'react-router-dom';\nimport s from './AuthNav.module.css';\nimport { routes } from '../../initial/routes-names';\nimport { buttons } from '../../initial/buttons-names';\n\nconst AuthNav = () => {\n    const { LOGIN } = routes\n    const { SIGN_IN, SIGN_UP } = buttons\n\n    return (\n        <ul className={s.list}>\n            {Object.values(routes).map(route => (\n                <li className={s.listItem} key={route}>\n                    <NavLink\n                        className={s.link}\n                        activeClassName={s.activeLink}\n                        exact to={route}>\n                        {route === LOGIN ? SIGN_IN : SIGN_UP}\n                    </NavLink>\n                </li>\n            ))}\n        </ul>\n    )\n}\n    \nexport default AuthNav;","import s from './AuthGoogle.module.css';\nimport { buttons } from 'initial/buttons-names';\nimport { googleURL } from 'constants.js';\nimport sprite from 'images/sprite.svg';\n\nconst AuthGoogle = () => {\n    const { GOOGLE } = buttons\n\n    return (\n        <div className={s.container}>\n            <p className={s.text}>\n                You can use your Google Account to authorize:\n            </p>\n            <a\n                className={s.link}\n                href={googleURL}\n                aria-label={GOOGLE}\n            >\n                <svg className={s.icon}>\n                    <use href={sprite + '#icon-google'} />\n                </svg>\n                {GOOGLE}\n            </a>\n        </div>\n    )\n}\n\nexport default AuthGoogle;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"LoginView_section__2_8an\",\"container\":\"LoginView_container__3W5E_\"};","import { useDispatch } from 'react-redux';\nimport s from './LoginView.module.css';\nimport authOperations from 'redux/auth/auth-operations';\nimport AuthIntro from 'components/AuthIntro';\nimport AuthNav from 'components/AuthNav';\nimport AuthGoogle from 'components/AuthGoogle';\nimport AuthForm from 'components/AuthForm';\n\nconst LoginView = () => {\n    const dispatch = useDispatch()\n\n    const onFormSubmit = (data) => {\n        const user = {\n            email: data['E-mail'],\n            password: data['Password']\n        }\n        dispatch(authOperations.logIn(user));\n    };\n    \n    return (\n        <section className={s.section}>\n            <AuthIntro />\n            <div className={s.container}>\n                <AuthNav />\n                <AuthGoogle />\n                <AuthForm onFormSubmit={onFormSubmit}/>\n            </div>\n        </section>\n    )\n}\n\nexport default LoginView;"],"sourceRoot":""}