{"version":3,"sources":["views/TestView/TestView.module.css","components/Questions/Questions.jsx","views/TestView/TestView.jsx"],"names":["module","exports","useStyles","makeStyles","root","display","OrangeRadio","withStyles","color","checked","props","Radio","Questions","value","handleChange","answers","classes","FormControl","component","className","RadioGroup","aria-label","name","onChange","map","answer","index","FormControlLabel","control","label","TestView","testTitle","history","useHistory","dispatch","useDispatch","questions","useSelector","testsSelectors","getQuestions","results","getResults","testUrl","getTestUrl","useState","setValue","quesNumb","setQuesNumb","question","questionId","disabled","length","useEffect","find","result","testsOperations","fetchTests","styles","container","testHeader","firstPart","secondPart","type","finishTestBtnDis","finishTestBtn","onClick","postAnswers","push","testCard","quesStat","event","addResult","target","Loader","navBtns","prevBtnDis","prevBtn","leftArrow","href","sprite","navBtnsText","nextBtnDis","nextBtn","rightArrow"],"mappings":"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","file":"static/js/test-page.bdc80681.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TestView_container__1tF_I\",\"testHeader\":\"TestView_testHeader__1alwD\",\"testTitle\":\"TestView_testTitle__caovK\",\"finishTestBtn\":\"TestView_finishTestBtn__TNex7\",\"finishTestBtnDis\":\"TestView_finishTestBtnDis__1-lKt\",\"finishTestDis\":\"TestView_finishTestDis__3dUGN\",\"testCard\":\"TestView_testCard__2n6tN\",\"quesStat\":\"TestView_quesStat__1AiSr\",\"quesNumb\":\"TestView_quesNumb__24DNk\",\"question\":\"TestView_question__2Rxhs\",\"navBtns\":\"TestView_navBtns__3svUt\",\"prevBtn\":\"TestView_prevBtn__3SMaJ\",\"nextBtn\":\"TestView_nextBtn__G8dHd\",\"prevBtnDis\":\"TestView_prevBtnDis__c2B-b\",\"nextBtnDis\":\"TestView_nextBtnDis__EIrMy\",\"leftArrow\":\"TestView_leftArrow__DHU9Z\",\"rightArrow\":\"TestView_rightArrow__1uwsN\",\"navBtnsText\":\"TestView_navBtnsText__1LSRz\"};","// import clsx from 'clsx';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'block',\n  },\n});\n\nconst OrangeRadio = withStyles({\n  root: {\n    color: 'defoult',\n    '&$checked': {\n      color: '#FF6B09',\n    },\n  },\n  checked: {},\n})(props => <Radio color=\"default\" {...props} />);\n\nexport default function Questions({ value, handleChange, answers }) {\n  const classes = useStyles();\n\n  return (\n    <FormControl component=\"fieldset\" className={classes.root}>\n      <RadioGroup\n        // className={classes.typography.body1}\n        aria-label=\"answers\"\n        name=\"answers\"\n        value={value}\n        onChange={handleChange}\n      >\n        {answers.map((answer, index) => (\n          <FormControlLabel\n            // className={classes.label}\n            value={answer}\n            control={<OrangeRadio />}\n            label={answer}\n            key={index}\n          />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { testsSelectors } from '../../redux/tests';\nimport { addResult } from '../../redux/tests/tests-slice';\nimport { testsOperations } from '../../redux/tests';\nimport styles from './TestView.module.css';\nimport Questions from '../../components/Questions';\nimport Loader from '../../components/Loader';\nimport classes from './TestView.module.css';\nimport sprite from '../../images/sprite.svg';\n\nexport default function TestView({ testTitle }) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const questions = useSelector(testsSelectors.getQuestions);\n  const results = useSelector(testsSelectors.getResults);\n  const testUrl = useSelector(testsSelectors.getTestUrl);\n  const [value, setValue] = useState('');\n  const [quesNumb, setQuesNumb] = useState(0);\n  const question = questions[quesNumb]?.question;\n  const answers = questions[quesNumb]?.answers;\n  const questionId = questions[quesNumb]?.questionId;\n  const disabled = results.length !== questions.length;\n\n  useEffect(() => {\n    const answer = results.find(result => result.questionId === questionId)\n      ?.answer;\n\n    if (answer) {\n      setValue(answer);\n    } else {\n      setValue('');\n    }\n  }, [questionId, results]);\n\n  useEffect(() => {\n    if (questions.length === 0) {\n      dispatch(testsOperations.fetchTests(testUrl));\n    }\n  }, [dispatch, questions, testUrl]);\n\n  const handleChange = event => {\n    dispatch(\n      addResult({\n        questionId,\n        answer: event.target.value,\n      }),\n    );\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.testHeader}>\n        <h1 className={styles.testTitle}>\n          {testTitle.firstPart} <br></br> {testTitle.secondPart}\n        </h1>\n        <button\n          type=\"button\"\n          disabled={results.length !== questions.length}\n          className={disabled ? styles.finishTestBtnDis : styles.finishTestBtn}\n          onClick={() => {\n            dispatch(testsOperations.postAnswers({ testUrl, results }));\n            history.push('/results');\n          }}\n        >\n          Finish test\n        </button>\n      </div>\n      <div className={styles.testCard}>\n        <p className={styles.quesStat}>\n          Question <span className={styles.quesNumb}>{quesNumb + 1}</span>/\n          {questions.length}\n        </p>\n        <h2 className={styles.question}>{question}</h2>\n\n        {questions.length > 0 ? (\n          <Questions\n            value={value}\n            handleChange={handleChange}\n            answers={answers}\n          />\n        ) : (\n          <Loader />\n        )}\n      </div>\n      <div className={classes.navBtns}>\n        <button\n          type=\"button\"\n          disabled={quesNumb === 0}\n          onClick={() => setQuesNumb(quesNumb - 1)}\n          className={quesNumb === 0 ? classes.prevBtnDis : classes.prevBtn}\n        >\n          <svg className={classes.leftArrow}>\n            <use href={sprite + '#left-arrow'}></use>\n          </svg>\n          <span className={classes.navBtnsText}>Previous question</span>\n        </button>\n        <button\n          type=\"button\"\n          disabled={quesNumb === questions.length - 1}\n          onClick={() => setQuesNumb(quesNumb + 1)}\n          className={\n            quesNumb === questions.length - 1\n              ? classes.nextBtnDis\n              : classes.nextBtn\n          }\n        >\n          <span className={classes.navBtnsText}>Next question</span>\n          <svg className={classes.rightArrow}>\n            <use href={sprite + '#right-arrow'}></use>\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}