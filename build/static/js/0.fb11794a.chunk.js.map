{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/getFields.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/isErrorStateChanged.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","element","type","isObjectType","isNullOrUndefined","Date","name","substring","search","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","current","isObject","keys","isEmptyObject","find","window","HTMLElement","document","isWeb","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","omit","ref","focus","refs","getFieldsValues","fieldsRef","defaultValuesRef","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","data","isBoolean","getFields","fieldsRefs","currentFields","defaultResult","isValid","validResult","options","option","checked","map","attributes","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","valueAsNumber","valueAsDate","setValueAs","NaN","getFieldValueAs","error","validFields","fieldsWithValidation","previousError","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","validationData","isRegex","a","required","maxLength","minLength","min","max","pattern","validate","inputValue","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","mode","isOnSubmit","tearDowns","tearDown","this","push","teardown","observer","subscription","closed","add","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldsNamesRef","Set","formStateSubjectRef","watchSubjectRef","controllerSubjectRef","fieldArraySubjectRef","fieldArrayDefaultValuesRef","watchFieldsRef","isMountedRef","fieldsWithValidationRef","validFieldsRef","isWatchAllRef","contextRef","resolverRef","fieldArrayNamesRef","validationMode","getValidationModes","isValidateAllFieldCriteria","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","setFormState","formStateRef","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","shouldReRender","isErrorStateChanged","updatedFormState","setFieldValue","rawValue","shouldRegister","register","isHTMLElement","forEach","radioRef","selectRef","includes","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","getFormIsDirty","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","names","currentNames","validateForm","fieldError","Promise","all","setInternalValues","inputKey","fieldName","isFieldWatched","has","match","updateValueAndGetDefault","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","handleChange","inputType","shouldSkipValidation","skipValidation","previousFormIsValid","parentNodeName","getNodeParentName","currentError","getValues","fieldNames","updateIsValid","previousIsValid","clearErrors","inputName","setError","shouldFocus","watchInternal","isGlobal","isArrayNames","fieldValues","watch","subscribe","info","unregister","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","registerFieldRef","isRadioOrCheckboxFunction","contains","then","isInitialRegister","onChange","onBlur","handleSubmit","onValid","onInvalid","preventDefault","persist","resetFromState","keepErrors","keepIsSubmitted","keepSubmitCount","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","keepDefaultValues","formStateSubscription","shouldRenderFormState","useFieldArraySubscription","unsubscribe","control","getProxyFormState"],"mappings":"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","file":"static/js/0.fb11794a.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isUndefined from './isUndefined';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormReturn<TFieldValues> =>\n  (React.useContext(FormContext) as unknown) as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={(omit(props, 'children') as unknown) as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T, K extends ReadFormState>(\n  formState: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) =>\n  isEmptyObject(formState) ||\n  Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n  Object.keys(formState).find(\n    (key) =>\n      readFormStateRef[key as keyof ReadFormState] ===\n      (isRoot ? VALIDATION_MODE.all : true),\n  );\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import { UNDEFINED } from '../constants';\n\nimport isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef: React.MutableRefObject<FieldValues> = { current: {} },\n  output: Record<string, any> = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      if (current) {\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n      }\n    }\n  }\n\n  return {\n    ...defaultValuesRef.current,\n    ...output,\n  };\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (Array.isArray(index) ? index : [index]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { SELECT } from '../constants';\nimport { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import {\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    inputValue === '' || (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(inputValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (\n    value: Observer<T>,\n  ) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetFormIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef(\n    new Subject<Partial<FormState<TFieldValues>>>(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      value?: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () =>\n    (formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors));\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        isWatched\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(isWatched ? {} : updatedFormState);\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const _f = get(fieldsRef.current, name, {})._f as Field['_f'];\n\n      if (_f) {\n        const value =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n            ? ''\n            : rawValue;\n        _f.value = rawValue;\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(\n            (radioRef: HTMLInputElement) =>\n              (radioRef.checked = radioRef.value === value),\n          );\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (value as string[]).includes(\n                selectRef.value,\n              )),\n          );\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1\n            ? _f.refs.forEach(\n                (checkboxRef) =>\n                  (checkboxRef.checked = Array.isArray(value)\n                    ? !!(value as []).find(\n                        (data: string) => data === checkboxRef.value,\n                      )\n                    : value === checkboxRef.value),\n              )\n            : (_f.refs[0].checked = !!value);\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: {\n              ...defaultValuesRef.current,\n              ...values,\n            } as DefaultValues<TFieldValues>,\n            name,\n          });\n        }\n\n        options.shouldDirty && updateAndGetDirtyState(name, value);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    },\n    [],\n  );\n\n  const getFormIsDirty: GetFormIsDirty = React.useCallback((name, data) => {\n    if (readFormStateRef.current.isDirty) {\n      const formValues = getFieldsValues(fieldsRef);\n\n      name && data && set(formValues, name, data);\n\n      return !deepEqual(formValues, defaultValuesRef.current);\n    }\n\n    return false;\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getFormIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef, defaultValuesRef),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : Array.isArray(name)\n        ? name\n        : [name];\n      let isValid;\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        isValid = isEmptyObject(\n          await executeSchemaOrResolverValidation(\n            fields,\n            isUndefined(name)\n              ? undefined\n              : (fields as FieldName<TFieldValues>[]),\n          ),\n        );\n      } else {\n        isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : await Promise.all(\n              fields.map(async (data) => await executeValidation(data, null)),\n            );\n      }\n\n      formStateSubjectRef.current.next({\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current ? isValid : getIsValid(),\n      });\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n\n        field && !field._f\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValueAndGetDefault = (name: InternalFieldName) => {\n    let defaultValue;\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (\n      field &&\n      (!isEmptyObject(defaultValuesRef.current) || !isUndefined(field._f.value))\n    ) {\n      defaultValue = isUndefined(field._f.value)\n        ? get(defaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    isMountedRef.current = true;\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getFormIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    (field && !field._f) || isFieldArray\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, value });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        const inputValue = inputType ? getFieldValue(field) : value;\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n        const shouldSkipValidation = skipValidation({\n          isBlurEvent,\n          isTouched: !!get(formStateRef.current.touchedFields, name),\n          isSubmitted: formStateRef.current.isSubmitted,\n          isReValidateOnBlur,\n          isReValidateOnChange,\n          ...validationMode,\n        });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          state.touchedFields = formStateRef.current.touchedFields;\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              value: inputValue,\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(isWatched ? {} : state)\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(fieldsRef, defaultValuesRef),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            value: inputValue,\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n  ) => {\n    const values = isMountedRef.current\n      ? getFieldsValues(fieldsRef, defaultValuesRef)\n      : defaultValuesRef.current;\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(fieldsRef, defaultValuesRef),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formStateRef.current.errors, inputName),\n      );\n\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = isMountedRef.current\n        ? getValues()\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue || {}\n        : { [fieldNames as string]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n        isGlobal && watchFieldsRef.current.add(fieldName as string);\n        result.push(get(fieldValues, fieldName as string));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | FieldPath<TFieldValues>[]\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? Array.isArray(name)\n        ? name\n        : [name]\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getFormIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n\n    if (!options.keepIsValid) {\n      updateIsValid();\n    }\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    let field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n      if (\n        (isRadioOrCheckbox\n          ? Array.isArray(field._f.refs) &&\n            compact(field._f.refs).find(\n              (option) => ref.value === option.value && option === ref,\n            )\n          : ref === field._f.ref) ||\n        !field ||\n        (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref))\n      ) {\n        return;\n      }\n\n      field = {\n        _f: isRadioOrCheckbox\n          ? {\n              ...field._f,\n              refs: [\n                ...compact(field._f.refs || []).filter(\n                  (ref) => isHTMLElement(ref) && document.contains(ref),\n                ),\n                ref,\n              ],\n              ref: { type: ref.type, name },\n            }\n          : {\n              ...field._f,\n              ref,\n            },\n      };\n\n      set(fieldsRef.current, name, field);\n\n      const defaultValue = updateValueAndGetDefault(name);\n\n      if (\n        isRadioOrCheckbox && Array.isArray(defaultValue)\n          ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n          : isUndefined(get(fieldsRef.current, name)._f.value)\n      ) {\n        get(fieldsRef.current, name)._f.value = getFieldValue(\n          get(fieldsRef.current, name),\n        );\n      }\n\n      if (options) {\n        if (\n          !validationMode.isOnSubmit &&\n          field &&\n          readFormStateRef.current.isValid\n        ) {\n          validateField(field, isValidateAllFieldCriteria).then((error) => {\n            isEmptyObject(error)\n              ? set(validFieldsRef.current, name, true)\n              : unset(validFieldsRef.current, name);\n\n            formStateRef.current.isValid &&\n              !isEmptyObject(error) &&\n              setFormState({ ...formStateRef.current, isValid: getIsValid() });\n          });\n        }\n      }\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref,\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          ...options,\n        },\n      });\n      options && set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n\n      isInitialRegister && updateValueAndGetDefault(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null) =>\n              ref && registerFieldRef(name, ref, options),\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldValues = {\n        ...defaultValuesRef.current,\n        ...getFieldsValues(fieldsRef, defaultValuesRef),\n      };\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    ({\n      keepErrors,\n      keepDirty,\n      keepIsSubmitted,\n      keepTouched,\n      keepIsValid,\n      keepSubmitCount,\n    }: KeepStateOptions) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty ? formStateRef.current.isDirty : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !validationMode.isOnSubmit,\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        value: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    resetFromState(keepStateOptions);\n  };\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState: Partial<FormState<TFieldValues>> = {}) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          setFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        watchFieldsRef,\n        getFormIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n  };\n}\n"],"sourceRoot":""}