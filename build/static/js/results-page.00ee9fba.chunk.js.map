{"version":3,"sources":["components/Diagramm/Diagramm.module.css","views/ResultsView/ResultView.module.css","components/Diagramm/Diagramm.jsx","images/not_bad_cat.png","images/bad_cat.png","views/ResultsView/ResultView.jsx"],"names":["module","exports","Diagramm","testStatistics","useSelector","testsSelectors","getTestStatistics","data","name","value","rightAnswer","incorrectAnswer","COLORS","RADIAN","Math","PI","width","height","coordinateXY","outerRadius","window","innerWidth","PieChart","className","s","diagrammBlock","Pie","cx","cy","labelLine","label","midAngle","innerRadius","percent","radius","index","x","cos","y","sin","textAnchor","dominantBaseline","toFixed","fill","dataKey","map","entry","Cell","length","Legend","layout","align","verticalAlign","ResultView","history","useHistory","dispatch","useDispatch","testUrl","getTestUrl","correctAnswers","totalAnswers","mainText","secondaryText","catImage","mark","markResult","notBadCat","badCat","Container","title","subTitle","testName","line","diagramm","answers","answersText","answerNumber","verticalLine","resultImage","src","alt","resultTitle","resultText","button","type","onClick","unsetResults","push"],"mappings":"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","file":"static/js/results-page.00ee9fba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"diagrammBlock\":\"Diagramm_diagrammBlock__Y7ZVv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ResultView_title__V9mf5\",\"subTitle\":\"ResultView_subTitle__1lXoH\",\"line\":\"ResultView_line__IbjVT\",\"diagramm\":\"ResultView_diagramm__VeFG9\",\"answers\":\"ResultView_answers__3mgfm\",\"answersText\":\"ResultView_answersText__1YEAY\",\"answerNumber\":\"ResultView_answerNumber__3RL1O\",\"verticalLine\":\"ResultView_verticalLine__1CqG9\",\"resultImage\":\"ResultView_resultImage__9vwTg\",\"resultTitle\":\"ResultView_resultTitle__3rGUf\",\"resultText\":\"ResultView_resultText__3zC1q\",\"button\":\"ResultView_button__2WR_d\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\nimport { testsSelectors } from '../../redux/tests';\nimport s from './Diagramm.module.css';\n// import '../../css/common.css';\n\nexport default function Diagramm() {\n  const testStatistics = useSelector(testsSelectors.getTestStatistics);\n\n  const correctAnswers = testStatistics.rightAnswer;\n  const incorrectAnswers = testStatistics.incorrectAnswer;\n\n  const data = [\n    { name: 'Correct', value: correctAnswers },\n    { name: 'Incorrect', value: incorrectAnswers },\n  ];\n\n  const COLORS = ['#ff6b09', '#D7D7D7'];\n\n  const RADIAN = Math.PI / 180;\n  const renderCustomizedLabel = ({\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n    index,\n  }) => {\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        // fill=\"white\"\n        textAnchor={x > cx ? 'start' : 'end'}\n        dominantBaseline=\"central\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n\n  let width = 280;\n  let height = 156;\n  let coordinateXY = 73;\n  let outerRadius = 78;\n  if (window.innerWidth >= 768) {\n    width = 450;\n    height = 285;\n    coordinateXY = 137.5;\n    outerRadius = 142.5;\n  }\n  return (\n    <PieChart className={s.diagrammBlock} width={width} height={height}>\n      <Pie\n        data={data}\n        cx={coordinateXY}\n        cy={coordinateXY}\n        labelLine={false}\n        // label\n        label={renderCustomizedLabel}\n        outerRadius={outerRadius}\n        fill=\"#8884d8\"\n        dataKey=\"value\"\n      >\n        {data.map((entry, index) => (\n          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n        ))}\n      </Pie>\n      <Legend layout=\"vertical\" align=\"right\" verticalAlign=\"top\" />\n      {/* <Legend verticalAlign=\"top\" /> */}\n    </PieChart>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/not_bad_cat.aa40c4d6.png\";","export default __webpack_public_path__ + \"static/media/bad_cat.1b67c8c9.png\";","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { unsetResults } from '../../redux/tests/tests-slice';\nimport { testsSelectors } from '../../redux/tests';\nimport Container from '../../components/Container';\nimport Diagramm from '../../components/Diagramm';\nimport notBadCat from '../../images/not_bad_cat.png';\nimport badCat from '../../images/bad_cat.png';\n\nimport s from './ResultView.module.css';\n\nexport default function ResultView() {\n  const history = useHistory();\n\n  const dispatch = useDispatch();\n  const testUrl = useSelector(testsSelectors.getTestUrl);\n  const testStatistics = useSelector(testsSelectors.getTestStatistics);\n\n  const correctAnswers = testStatistics.rightAnswer;\n  const incorrectAnswers = testStatistics.incorrectAnswer;\n  const totalAnswers = correctAnswers + incorrectAnswers;\n\n  let mainText = '';\n  let secondaryText = '';\n  let catImage = null;\n\n  function testName(testUrl) {\n    if (testUrl === 'theory') {\n      return '[TESTING THEORY_]';\n    } else if (testUrl === 'tech') {\n      return '[QA TECHNICAL TRAINING_]';\n    }\n  }\n\n  function markResult(correctAnswers, totalAnswers) {\n    if (correctAnswers === totalAnswers) {\n      return 5;\n    } else if (correctAnswers > totalAnswers / 2) {\n      return 3;\n    } else if (correctAnswers <= totalAnswers / 2) {\n      return 2;\n    }\n  }\n\n  const mark = markResult(correctAnswers, totalAnswers);\n\n  if (mark === 5) {\n    mainText = 'Excellent!!!';\n    secondaryText = 'You are the best of the best of the best!';\n    catImage = notBadCat;\n  } else if (mark === 3) {\n    mainText = 'Not bad!';\n    secondaryText = 'But you still need to learn some materials.';\n    catImage = notBadCat;\n  } else if (mark === 2) {\n    mainText = 'Bad!';\n    secondaryText = 'You need to learn materials again.';\n    catImage = badCat;\n  }\n\n  const tryAgain = () => {\n    dispatch(unsetResults());\n    history.push('/test');\n  };\n\n  return (\n    <Container>\n      <h1 className={s.title}>Results</h1>\n      <p className={s.subTitle}>{testName(testUrl)}</p>\n      <span className={s.line}></span>\n      <div className={s.diagramm}>\n        <Diagramm />\n      </div>\n      <div className={s.answers}>\n        <p className={s.answersText}>\n          Correct answers -{' '}\n          <span className={s.answerNumber}>{correctAnswers}</span>\n        </p>\n        <span className={s.verticalLine}></span>\n        <p className={s.answersText}>\n          Total answers - <span className={s.answerNumber}>{totalAnswers}</span>\n        </p>\n      </div>\n\n      <img className={s.resultImage} src={catImage} alt=\"Cat\" />\n\n      <h2 className={s.resultTitle}>{mainText}</h2>\n      <p className={s.resultText}>{secondaryText}</p>\n      <button className={s.button} type=\"button\" onClick={tryAgain}>\n        Try again\n      </button>\n    </Container>\n  );\n}\n"],"sourceRoot":""}