{"version":3,"sources":["views/TestView/TestView.module.css","components/Questions/Questions.module.css","components/Questions/Questions.jsx","views/TestView/TestView.jsx"],"names":["module","exports","Questions","value","handleChange","answers","className","s","form","name","map","answer","index","ulField","field","radioBtn","type","checked","onChange","icon","label","TestView","history","useHistory","dispatch","useDispatch","questions","useSelector","testsSelectors","getQuestions","results","getResults","testUrl","getTestUrl","quesNumb","getQuesNumb","useState","setValue","question","questionId","disabled","length","useEffect","find","result","testsOperations","fetchTests","styles","container","testHeader","testTitle","testName","finishTestBtn","finishTestBtnDis","onClick","postAnswers","setQuesNumb","push","testCard","quesStat","event","addResult","target","Loader","classes","navBtns","prevBtnDis","prevBtn","leftArrow","href","sprite","navBtnsText","nextBtnDis","nextBtn","rightArrow"],"mappings":"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","file":"static/js/test-page.9a6fb64d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TestView_container__1tF_I\",\"testHeader\":\"TestView_testHeader__1alwD\",\"testTitle\":\"TestView_testTitle__caovK\",\"finishTestBtn\":\"TestView_finishTestBtn__TNex7\",\"finishTestBtnDis\":\"TestView_finishTestBtnDis__1-lKt\",\"finishTestDis\":\"TestView_finishTestDis__3dUGN\",\"testCard\":\"TestView_testCard__2n6tN\",\"quesStat\":\"TestView_quesStat__1AiSr\",\"quesNumb\":\"TestView_quesNumb__24DNk\",\"question\":\"TestView_question__2Rxhs\",\"navBtns\":\"TestView_navBtns__3svUt\",\"prevBtn\":\"TestView_prevBtn__3SMaJ\",\"nextBtn\":\"TestView_nextBtn__G8dHd\",\"prevBtnDis\":\"TestView_prevBtnDis__c2B-b\",\"nextBtnDis\":\"TestView_nextBtnDis__EIrMy\",\"leftArrow\":\"TestView_leftArrow__DHU9Z\",\"rightArrow\":\"TestView_rightArrow__1uwsN\",\"navBtnsText\":\"TestView_navBtnsText__1LSRz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ulField\":\"Questions_ulField__3oeGx\",\"field\":\"Questions_field__2YoLJ\",\"radioBtn\":\"Questions_radioBtn__hd-qY\",\"icon\":\"Questions_icon__YsNq_\",\"label\":\"Questions_label__ev7ql\"};","import s from './Questions.module.css';\n\nexport default function Questions({ value, handleChange, answers }) {\n  return (\n    <form className={s.form} name=\"anwers\">\n      <ul>\n        {answers.map((answer, index) => (\n          <li className={s.ulField} key={index}>\n            <label className={s.field}>\n              <input\n                className={s.radioBtn}\n                type=\"radio\"\n                checked={value === answer}\n                name=\"answer\"\n                value={answer}\n                onChange={handleChange}\n              />\n              <span className={s.icon}></span>\n              <span className={s.label}>{answer}</span>\n            </label>\n          </li>\n        ))}\n      </ul>\n    </form>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { testsSelectors } from '../../redux/tests';\nimport { addResult, setQuesNumb } from '../../redux/tests/tests-slice';\nimport { testsOperations } from '../../redux/tests';\nimport styles from './TestView.module.css';\nimport Questions from '../../components/Questions';\nimport Loader from '../../components/Loader';\nimport classes from './TestView.module.css';\nimport sprite from '../../images/sprite.svg';\n\nexport default function TestView() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const questions = useSelector(testsSelectors.getQuestions);\n  const results = useSelector(testsSelectors.getResults);\n  const testUrl = useSelector(testsSelectors.getTestUrl);\n  const quesNumb = useSelector(testsSelectors.getQuesNumb);\n  const [value, setValue] = useState('');\n  // const [quesNumb, setQuesNumb] = useState(0);\n  const question = questions[quesNumb]?.question;\n  const answers = questions[quesNumb]?.answers;\n  const questionId = questions[quesNumb]?.questionId;\n  const disabled = results.length !== questions.length;\n\n  function testName(testUrl) {\n    if (testUrl === 'theory') {\n      return (\n        <h1 className={styles.testTitle}>\n          [Testing <br></br> theory_]\n        </h1>\n      );\n    } else if (testUrl === 'tech') {\n      return (\n        <h1 className={styles.testTitle}>\n          [QA technical <br></br> training_]\n        </h1>\n      );\n    }\n  }\n\n  useEffect(() => {\n    const answer = results.find(result => result.questionId === questionId)\n      ?.answer;\n\n    if (answer) {\n      setValue(answer);\n    } else {\n      setValue('');\n    }\n  }, [questionId, results]);\n\n  useEffect(() => {\n    if (questions.length === 0) {\n      dispatch(testsOperations.fetchTests(testUrl));\n    }\n  }, [dispatch, questions, testUrl]);\n\n  const handleChange = event => {\n    dispatch(\n      addResult({\n        questionId,\n        answer: event.target.value,\n      }),\n    );\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.testHeader}>\n        {testName(testUrl)}\n        <button\n          type=\"button\"\n          disabled={results.length !== questions.length}\n          className={\n            disabled\n              ? `${styles.finishTestBtn} ${styles.finishTestBtnDis}`\n              : styles.finishTestBtn\n          }\n          onClick={() => {\n            dispatch(testsOperations.postAnswers({ testUrl, results }));\n            dispatch(setQuesNumb(0));\n            history.push('/results');\n          }}\n        >\n          Finish test\n        </button>\n      </div>\n      <div className={styles.testCard}>\n        <p className={styles.quesStat}>\n          Question <span className={styles.quesNumb}>{quesNumb + 1}</span>/\n          {questions.length}\n        </p>\n        <h2 className={styles.question}>{question}</h2>\n\n        {questions.length > 0 ? (\n          <Questions\n            value={value}\n            handleChange={handleChange}\n            answers={answers}\n          />\n        ) : (\n          <Loader />\n        )}\n      </div>\n      <div className={classes.navBtns}>\n        <button\n          type=\"button\"\n          disabled={quesNumb === 0}\n          onClick={() => dispatch(setQuesNumb(quesNumb - 1))}\n          className={\n            quesNumb === 0\n              ? `${classes.prevBtnDis} ${classes.prevBtn}`\n              : classes.prevBtn\n          }\n        >\n          <svg className={classes.leftArrow}>\n            <use href={sprite + '#left-arrow'}></use>\n          </svg>\n          <span className={classes.navBtnsText}>Previous question</span>\n        </button>\n        <button\n          type=\"button\"\n          disabled={quesNumb === questions.length - 1}\n          onClick={() => dispatch(setQuesNumb(quesNumb + 1))}\n          className={\n            quesNumb === questions.length - 1\n              ? `${classes.nextBtnDis} ${classes.nextBtn}`\n              : classes.nextBtn\n          }\n        >\n          <span className={classes.navBtnsText}>Next question</span>\n          <svg className={classes.rightArrow}>\n            <use href={sprite + '#right-arrow'}></use>\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}